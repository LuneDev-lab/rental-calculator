{"ast":null,"code":"var _jsxFileName = \"/workspaces/rental-calculator/src/components/InputField.js\";\n// src/components/InputField.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputField = ({\n  label,\n  value,\n  // Este 'value' agora deve ser o valor numérico (como string limpa)\n  onChange,\n  placeholder,\n  icon,\n  required = false,\n  helperText\n}) => {\n  // Função auxiliar para formatar um NÚMERO para moeda (apenas para exibição)\n  const formatForDisplay = numValue => {\n    if (numValue === '' || isNaN(numValue)) return ''; // Trata valores vazios ou não numéricos\n    return parseFloat(numValue).toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  };\n  const handleChange = e => {\n    const inputValue = e.target.value;\n    // Remove tudo que não é dígito (0-9) para obter o valor \"puro\"\n    // Mantém o valor como string para permitir edição de múltiplos dígitos\n    const numericValue = inputValue.replace(/\\D/g, '');\n    onChange(numericValue); // Chama o onChange do pai com o valor numérico puro\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"block text-sm font-semibold text-white mb-2\",\n      children: [label, required && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-pink-400 ml-1\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute left-4 top-1/2 transform -translate-y-1/2 text-blue-300\",\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\" // Mantemos como 'text' para poder manipular a formatação\n        // Exibe o valor formatado para o usuário, mas o valor real no estado é o 'limpo'\n        ,\n        value: formatForDisplay(value),\n        onChange: handleChange,\n        placeholder: placeholder,\n        className: \"w-full pl-12 pr-4 py-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-300 backdrop-blur-sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), helperText && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-sm text-blue-300/80\",\n      children: helperText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_c = InputField;\nexport default InputField;\nvar _c;\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InputField","label","value","onChange","placeholder","icon","required","helperText","formatForDisplay","numValue","isNaN","parseFloat","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","handleChange","e","inputValue","target","numericValue","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/workspaces/rental-calculator/src/components/InputField.js"],"sourcesContent":["// src/components/InputField.js\nimport React from 'react';\n\nconst InputField = ({ \n  label, \n  value, // Este 'value' agora deve ser o valor numérico (como string limpa)\n  onChange, \n  placeholder, \n  icon, \n  required = false, \n  helperText \n}) => {\n  // Função auxiliar para formatar um NÚMERO para moeda (apenas para exibição)\n  const formatForDisplay = (numValue) => {\n    if (numValue === '' || isNaN(numValue)) return ''; // Trata valores vazios ou não numéricos\n    return parseFloat(numValue).toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  };\n\n  const handleChange = (e) => {\n    const inputValue = e.target.value;\n    // Remove tudo que não é dígito (0-9) para obter o valor \"puro\"\n    // Mantém o valor como string para permitir edição de múltiplos dígitos\n    const numericValue = inputValue.replace(/\\D/g, ''); \n    onChange(numericValue); // Chama o onChange do pai com o valor numérico puro\n  };\n\n  return (\n    <div className=\"relative\">\n      <label className=\"block text-sm font-semibold text-white mb-2\">\n        {label}\n        {required && <span className=\"text-pink-400 ml-1\">*</span>}\n      </label>\n      \n      <div className=\"relative\">\n        <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-blue-300\">\n          {icon}\n        </div>\n        \n        <input\n          type=\"text\" // Mantemos como 'text' para poder manipular a formatação\n          // Exibe o valor formatado para o usuário, mas o valor real no estado é o 'limpo'\n          value={formatForDisplay(value)} \n          onChange={handleChange}\n          placeholder={placeholder}\n          className=\"w-full pl-12 pr-4 py-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-300 backdrop-blur-sm\"\n        />\n      </div>\n      \n      {helperText && (\n        <p className=\"mt-2 text-sm text-blue-300/80\">{helperText}</p>\n      )}\n    </div>\n  );\n};\n\nexport default InputField;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAClBC,KAAK;EACLC,KAAK;EAAE;EACPC,QAAQ;EACRC,WAAW;EACXC,IAAI;EACJC,QAAQ,GAAG,KAAK;EAChBC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;IACrC,IAAIA,QAAQ,KAAK,EAAE,IAAIC,KAAK,CAACD,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACnD,OAAOE,UAAU,CAACF,QAAQ,CAAC,CAACG,cAAc,CAAC,OAAO,EAAE;MAClDC,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAE,KAAK;MACfC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IACzB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAM,CAAClB,KAAK;IACjC;IACA;IACA,MAAMmB,YAAY,GAAGF,UAAU,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAClDnB,QAAQ,CAACkB,YAAY,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEtB,OAAA;IAAKwB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBzB,OAAA;MAAOwB,SAAS,EAAC,6CAA6C;MAAAC,QAAA,GAC3DvB,KAAK,EACLK,QAAQ,iBAAIP,OAAA;QAAMwB,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC,eAER7B,OAAA;MAAKwB,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBzB,OAAA;QAAKwB,SAAS,EAAC,kEAAkE;QAAAC,QAAA,EAC9EnB;MAAI;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAEN7B,OAAA;QACE8B,IAAI,EAAC,MAAM,CAAC;QACZ;QAAA;QACA3B,KAAK,EAAEM,gBAAgB,CAACN,KAAK,CAAE;QAC/BC,QAAQ,EAAEc,YAAa;QACvBb,WAAW,EAAEA,WAAY;QACzBmB,SAAS,EAAC;MAAiO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5O,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAELrB,UAAU,iBACTR,OAAA;MAAGwB,SAAS,EAAC,+BAA+B;MAAAC,QAAA,EAAEjB;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAC7D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACE,EAAA,GAvDI9B,UAAU;AAyDhB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}