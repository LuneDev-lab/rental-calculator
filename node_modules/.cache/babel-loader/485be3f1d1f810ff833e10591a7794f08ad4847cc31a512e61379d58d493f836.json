{"ast":null,"code":"var _jsxFileName = \"/workspaces/rental-calculator/src/components/InputField.js\";\n// src/components/InputField.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputField = ({\n  label,\n  value,\n  onChange,\n  placeholder,\n  icon,\n  required = false,\n  helperText\n}) => {\n  // Função para formatar o valor para exibição no input (inclui R$)\n  const formatValueForDisplay = inputValue => {\n    // Remove tudo que não é dígito ou vírgula\n    let cleanValue = inputValue.replace(/[^\\d,]/g, '');\n\n    // Permite apenas uma vírgula\n    const parts = cleanValue.split(',');\n    if (parts.length > 2) {\n      cleanValue = parts[0] + ',' + parts.slice(1).join('');\n    }\n\n    // Adiciona o \"R$\" e o espaço apenas se houver algum valor\n    if (cleanValue.length > 0) {\n      return `R$ ${cleanValue}`;\n    }\n    return '';\n  };\n\n  // Função para remover a formatação e obter o valor numérico limpo para o estado\n  const getRawNumericValue = formattedValue => {\n    if (!formattedValue) return '';\n    // Remove \"R$\", espaços, pontos de milhar e troca vírgula por ponto para o parse\n    return formattedValue.replace(/R\\$\\s?/g, '').replace(/\\./g, '') // Remove pontos de milhar\n    .replace(/,/g, '.'); // Troca vírgula por ponto para parseFloat\n  };\n  const handleChange = e => {\n    const inputValue = e.target.value;\n    // Formata o input para o usuário (adiciona R$, etc.)\n    const formattedDisplay = formatValueForDisplay(inputValue);\n    // Mas passa o valor \"limpo\" para o componente pai\n    onChange(getRawNumericValue(formattedDisplay));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"block text-sm font-semibold text-white mb-2\",\n      children: [label, required && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-pink-400 ml-1\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute left-4 top-1/2 transform -translate-y-1/2 text-blue-300\",\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\" // Mantém como 'text' para permitir a formatação customizada\n        // Exibe o valor do estado do pai, formatado para o usuário\n        ,\n        value: value !== '' ? formatValueForDisplay(value) : '',\n        onChange: handleChange\n        // O placeholder agora inclui o \"R$\" e o valor de exemplo.\n        // O espaçamento à esquerda (`pl-18`) acomodará o ícone e o \"R$ \".\n        ,\n        placeholder: placeholder,\n        className: \"w-full pl-18 pr-4 py-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-300 backdrop-blur-sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), helperText && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-sm text-blue-300/80\",\n      children: helperText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = InputField;\nexport default InputField;\nvar _c;\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InputField","label","value","onChange","placeholder","icon","required","helperText","formatValueForDisplay","inputValue","cleanValue","replace","parts","split","length","slice","join","getRawNumericValue","formattedValue","handleChange","e","target","formattedDisplay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/workspaces/rental-calculator/src/components/InputField.js"],"sourcesContent":["// src/components/InputField.js\nimport React from 'react';\n\nconst InputField = ({ \n  label, \n  value, \n  onChange, \n  placeholder, \n  icon, \n  required = false, \n  helperText \n}) => {\n\n  // Função para formatar o valor para exibição no input (inclui R$)\n  const formatValueForDisplay = (inputValue) => {\n    // Remove tudo que não é dígito ou vírgula\n    let cleanValue = inputValue.replace(/[^\\d,]/g, '');\n\n    // Permite apenas uma vírgula\n    const parts = cleanValue.split(',');\n    if (parts.length > 2) {\n      cleanValue = parts[0] + ',' + parts.slice(1).join('');\n    }\n\n    // Adiciona o \"R$\" e o espaço apenas se houver algum valor\n    if (cleanValue.length > 0) {\n        return `R$ ${cleanValue}`;\n    }\n    return '';\n  };\n\n  // Função para remover a formatação e obter o valor numérico limpo para o estado\n  const getRawNumericValue = (formattedValue) => {\n    if (!formattedValue) return '';\n    // Remove \"R$\", espaços, pontos de milhar e troca vírgula por ponto para o parse\n    return formattedValue\n      .replace(/R\\$\\s?/g, '')\n      .replace(/\\./g, '') // Remove pontos de milhar\n      .replace(/,/g, '.'); // Troca vírgula por ponto para parseFloat\n  };\n\n  const handleChange = (e) => {\n    const inputValue = e.target.value;\n    // Formata o input para o usuário (adiciona R$, etc.)\n    const formattedDisplay = formatValueForDisplay(inputValue);\n    // Mas passa o valor \"limpo\" para o componente pai\n    onChange(getRawNumericValue(formattedDisplay)); \n  };\n\n  return (\n    <div className=\"relative\">\n      <label className=\"block text-sm font-semibold text-white mb-2\">\n        {label}\n        {required && <span className=\"text-pink-400 ml-1\">*</span>}\n      </label>\n      \n      <div className=\"relative\">\n        {/* Ícone posicionado antes do R$ e do input */}\n        <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-blue-300\">\n          {icon}\n        </div>\n        \n        <input\n          type=\"text\" // Mantém como 'text' para permitir a formatação customizada\n          // Exibe o valor do estado do pai, formatado para o usuário\n          value={value !== '' ? formatValueForDisplay(value) : ''}\n          onChange={handleChange}\n          // O placeholder agora inclui o \"R$\" e o valor de exemplo.\n          // O espaçamento à esquerda (`pl-18`) acomodará o ícone e o \"R$ \".\n          placeholder={placeholder} \n          className=\"w-full pl-18 pr-4 py-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-300 backdrop-blur-sm\"\n        />\n      </div>\n      \n      {helperText && (\n        <p className=\"mt-2 text-sm text-blue-300/80\">{helperText}</p>\n      )}\n    </div>\n  );\n};\n\nexport default InputField;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}