{"ast":null,"code":"var _jsxFileName = \"/workspaces/rental-calculator/src/components/InputField.js\",\n  _s = $RefreshSig$();\n// src/components/InputField.js\nimport React, { useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputField = ({\n  label,\n  value,\n  // Este 'value' deve ser a string numérica pura (ex: \"500000\", \"2500.50\")\n  onChange,\n  placeholder,\n  // Este placeholder ainda pode ter \"R$ \" pois a nova formatação o suporta\n  icon,\n  required = false,\n  helperText\n}) => {\n  _s();\n  // Função para formatar uma string numérica pura (ex: \"3000000\") para exibição como moeda (ex: \"R$ 3.000.000,00\")\n  const formatToCurrencyDisplay = useCallback(numString => {\n    if (numString === null || numString === undefined || numString === '') {\n      return '';\n    }\n    // Converte a string numérica pura para número (considerando o ponto decimal)\n    const num = parseFloat(numString);\n    if (isNaN(num)) {\n      return ''; // Retorna vazio se não for um número válido após limpeza\n    }\n    // Formata como moeda brasileira\n    return num.toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  }, []);\n\n  // Formata o placeholder também usando a mesma lógica (para ter R$, ponto, vírgula)\n  const formattedPlaceholder = React.useMemo(() => {\n    // Primeiro, limpa o placeholder de qualquer R$ ou formatação para ter só o número\n    const cleanPlaceholder = placeholder.replace(/R\\$\\s?/g, '').replace(/\\./g, '').replace(/,/g, '.');\n    // Depois, formata o número limpo do placeholder para moeda\n    return formatToCurrencyDisplay(cleanPlaceholder);\n  }, [placeholder, formatToCurrencyDisplay]);\n\n  // Função para lidar com a mudança no input e limpar o valor para o estado\n  const handleChange = e => {\n    const inputValue = e.target.value;\n\n    // Remove \"R$\", espaços, pontos de milhar, e troca vírgula por ponto para decimais\n    // Mantém apenas dígitos e um ponto decimal (para o valor \"cru\" que será salvo no estado)\n    let cleanNumericString = inputValue.replace(/R\\$\\s?/g, '') // Remove \"R$\"\n    .replace(/\\./g, '') // Remove pontos (milhares)\n    .replace(/,/g, '.'); // Troca vírgula por ponto (decimais)\n\n    // Garante que só há um ponto decimal (evita \"1.2.3\")\n    const parts = cleanNumericString.split('.');\n    if (parts.length > 2) {\n      cleanNumericString = parts[0] + '.' + parts.slice(1).join('');\n    }\n\n    // Passa o valor numérico limpo (ex: \"3000000\" ou \"2500.50\") para o componente pai\n    onChange(cleanNumericString);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"block text-sm font-semibold text-white mb-2\",\n      children: [label, required && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-pink-400 ml-1\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\" // Mantém como 'text' para permitir a formatação customizada\n        // Exibe o valor do estado do pai, formatado como moeda\n        ,\n        value: formatToCurrencyDisplay(value),\n        onChange: handleChange,\n        placeholder: formattedPlaceholder // Usa o placeholder formatado\n        // pl-4 para padding normal à esquerda, pr-12 para dar espaço ao ícone à direita\n        ,\n        className: \"w-full pl-4 pr-12 py-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-300 backdrop-blur-sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute right-4 top-1/2 transform -translate-y-1/2 text-blue-300\",\n        children: icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), helperText && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-sm text-blue-300/80\",\n      children: helperText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(InputField, \"WTazhJMei6ekRYAkh/rhYGkWMhE=\");\n_c = InputField;\nexport default InputField;\nvar _c;\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"names":["React","useCallback","jsxDEV","_jsxDEV","InputField","label","value","onChange","placeholder","icon","required","helperText","_s","formatToCurrencyDisplay","numString","undefined","num","parseFloat","isNaN","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","formattedPlaceholder","useMemo","cleanPlaceholder","replace","handleChange","e","inputValue","target","cleanNumericString","parts","split","length","slice","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/workspaces/rental-calculator/src/components/InputField.js"],"sourcesContent":["// src/components/InputField.js\nimport React, { useCallback } from 'react';\n\nconst InputField = ({ \n  label, \n  value, // Este 'value' deve ser a string numérica pura (ex: \"500000\", \"2500.50\")\n  onChange, \n  placeholder, // Este placeholder ainda pode ter \"R$ \" pois a nova formatação o suporta\n  icon, \n  required = false, \n  helperText \n}) => {\n\n  // Função para formatar uma string numérica pura (ex: \"3000000\") para exibição como moeda (ex: \"R$ 3.000.000,00\")\n  const formatToCurrencyDisplay = useCallback((numString) => {\n    if (numString === null || numString === undefined || numString === '') {\n      return '';\n    }\n    // Converte a string numérica pura para número (considerando o ponto decimal)\n    const num = parseFloat(numString);\n    if (isNaN(num)) {\n      return ''; // Retorna vazio se não for um número válido após limpeza\n    }\n    // Formata como moeda brasileira\n    return num.toLocaleString('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n  }, []);\n\n  // Formata o placeholder também usando a mesma lógica (para ter R$, ponto, vírgula)\n  const formattedPlaceholder = React.useMemo(() => {\n    // Primeiro, limpa o placeholder de qualquer R$ ou formatação para ter só o número\n    const cleanPlaceholder = placeholder\n                               .replace(/R\\$\\s?/g, '')\n                               .replace(/\\./g, '')\n                               .replace(/,/g, '.');\n    // Depois, formata o número limpo do placeholder para moeda\n    return formatToCurrencyDisplay(cleanPlaceholder);\n  }, [placeholder, formatToCurrencyDisplay]);\n\n\n  // Função para lidar com a mudança no input e limpar o valor para o estado\n  const handleChange = (e) => {\n    const inputValue = e.target.value;\n    \n    // Remove \"R$\", espaços, pontos de milhar, e troca vírgula por ponto para decimais\n    // Mantém apenas dígitos e um ponto decimal (para o valor \"cru\" que será salvo no estado)\n    let cleanNumericString = inputValue\n      .replace(/R\\$\\s?/g, '')  // Remove \"R$\"\n      .replace(/\\./g, '')     // Remove pontos (milhares)\n      .replace(/,/g, '.');    // Troca vírgula por ponto (decimais)\n    \n    // Garante que só há um ponto decimal (evita \"1.2.3\")\n    const parts = cleanNumericString.split('.');\n    if (parts.length > 2) {\n      cleanNumericString = parts[0] + '.' + parts.slice(1).join('');\n    }\n\n    // Passa o valor numérico limpo (ex: \"3000000\" ou \"2500.50\") para o componente pai\n    onChange(cleanNumericString); \n  };\n\n  return (\n    <div className=\"relative\">\n      <label className=\"block text-sm font-semibold text-white mb-2\">\n        {label}\n        {required && <span className=\"text-pink-400 ml-1\">*</span>}\n      </label>\n      \n      <div className=\"relative\">\n        {/* INPUT FIELD */}\n        <input\n          type=\"text\" // Mantém como 'text' para permitir a formatação customizada\n          // Exibe o valor do estado do pai, formatado como moeda\n          value={formatToCurrencyDisplay(value)} \n          onChange={handleChange}\n          placeholder={formattedPlaceholder} // Usa o placeholder formatado\n          // pl-4 para padding normal à esquerda, pr-12 para dar espaço ao ícone à direita\n          className=\"w-full pl-4 pr-12 py-4 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-300 backdrop-blur-sm\"\n        />\n        \n        {/* ICON POSICIONADO NO FINAL DO INPUT */}\n        <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-blue-300\">\n          {icon}\n        </div>\n      </div>\n      \n      {helperText && (\n        <p className=\"mt-2 text-sm text-blue-300/80\">{helperText}</p>\n      )}\n    </div>\n  );\n};\n\nexport default InputField;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,UAAU,GAAGA,CAAC;EAClBC,KAAK;EACLC,KAAK;EAAE;EACPC,QAAQ;EACRC,WAAW;EAAE;EACbC,IAAI;EACJC,QAAQ,GAAG,KAAK;EAChBC;AACF,CAAC,KAAK;EAAAC,EAAA;EAEJ;EACA,MAAMC,uBAAuB,GAAGZ,WAAW,CAAEa,SAAS,IAAK;IACzD,IAAIA,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKC,SAAS,IAAID,SAAS,KAAK,EAAE,EAAE;MACrE,OAAO,EAAE;IACX;IACA;IACA,MAAME,GAAG,GAAGC,UAAU,CAACH,SAAS,CAAC;IACjC,IAAII,KAAK,CAACF,GAAG,CAAC,EAAE;MACd,OAAO,EAAE,CAAC,CAAC;IACb;IACA;IACA,OAAOA,GAAG,CAACG,cAAc,CAAC,OAAO,EAAE;MACjCC,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAE,KAAK;MACfC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IACzB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,oBAAoB,GAAGxB,KAAK,CAACyB,OAAO,CAAC,MAAM;IAC/C;IACA,MAAMC,gBAAgB,GAAGlB,WAAW,CACRmB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CACtBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC9C;IACA,OAAOd,uBAAuB,CAACa,gBAAgB,CAAC;EAClD,CAAC,EAAE,CAAClB,WAAW,EAAEK,uBAAuB,CAAC,CAAC;;EAG1C;EACA,MAAMe,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAM,CAACzB,KAAK;;IAEjC;IACA;IACA,IAAI0B,kBAAkB,GAAGF,UAAU,CAChCH,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAE;IAAA,CACxBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAK;IAAA,CACvBA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAI;;IAE1B;IACA,MAAMM,KAAK,GAAGD,kBAAkB,CAACE,KAAK,CAAC,GAAG,CAAC;IAC3C,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MACpBH,kBAAkB,GAAGC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAC/D;;IAEA;IACA9B,QAAQ,CAACyB,kBAAkB,CAAC;EAC9B,CAAC;EAED,oBACE7B,OAAA;IAAKmC,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBpC,OAAA;MAAOmC,SAAS,EAAC,6CAA6C;MAAAC,QAAA,GAC3DlC,KAAK,EACLK,QAAQ,iBAAIP,OAAA;QAAMmC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC,eAERxC,OAAA;MAAKmC,SAAS,EAAC,UAAU;MAAAC,QAAA,gBAEvBpC,OAAA;QACEyC,IAAI,EAAC,MAAM,CAAC;QACZ;QAAA;QACAtC,KAAK,EAAEO,uBAAuB,CAACP,KAAK,CAAE;QACtCC,QAAQ,EAAEqB,YAAa;QACvBpB,WAAW,EAAEgB,oBAAqB,CAAC;QACnC;QAAA;QACAc,SAAS,EAAC;MAAiO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5O,CAAC,eAGFxC,OAAA;QAAKmC,SAAS,EAAC,mEAAmE;QAAAC,QAAA,EAC/E9B;MAAI;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAELhC,UAAU,iBACTR,OAAA;MAAGmC,SAAS,EAAC,+BAA+B;MAAAC,QAAA,EAAE5B;IAAU;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAC7D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA5FIR,UAAU;AAAAyC,EAAA,GAAVzC,UAAU;AA8FhB,eAAeA,UAAU;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}