{"ast":null,"code":"// src/utils/calculations.js\n\n/**\n * Remove formatação de moeda e converte para número\n */\nconst parseMoneyValue = value => {\n  if (!value) return 0;\n\n  // Remove R$, pontos e vírgulas, depois converte para número\n  const cleanValue = value.replace(/R\\$\\s?/g, '').replace(/\\./g, '').replace(/,/g, '.');\n  return parseFloat(cleanValue) || 0;\n};\n\n/**\n * Calcula todos os indicadores de rentabilidade\n */\nexport const calculateRentability = formData => {\n  const propertyValue = parseMoneyValue(formData.propertyValue);\n  const monthlyRent = parseMoneyValue(formData.monthlyRent);\n  const monthlyCosts = parseMoneyValue(formData.monthlyCosts);\n  const downPayment = parseMoneyValue(formData.downPayment);\n\n  // Validação básica\n  if (propertyValue <= 0 || monthlyRent <= 0) {\n    throw new Error('Valores inválidos para cálculo');\n  }\n\n  // Lucro líquido mensal\n  const netMonthlyProfit = monthlyRent - monthlyCosts;\n\n  // Rentabilidade mensal sobre o valor do imóvel\n  const monthlyRentability = netMonthlyProfit / propertyValue * 100;\n\n  // Rentabilidade anual\n  const annualRentability = monthlyRentability * 12;\n\n  // ROI (Return on Investment) - considerando o valor de entrada se informado\n  const investmentBase = downPayment > 0 ? downPayment : propertyValue;\n  const roi = netMonthlyProfit * 12 / investmentBase * 100;\n\n  // Payback - tempo para recuperar o investimento\n  const paybackMonths = investmentBase / netMonthlyProfit;\n  const paybackYears = paybackMonths / 12;\n\n  // Projeções anuais\n  const annualNetProfit = netMonthlyProfit * 12;\n  const annualGrossProfit = monthlyRent * 12;\n  const annualCosts = monthlyCosts * 12;\n  return {\n    // Valores principais\n    propertyValue,\n    monthlyRent,\n    monthlyCosts,\n    downPayment: downPayment || propertyValue,\n    // Lucros\n    netMonthlyProfit,\n    annualNetProfit,\n    annualGrossProfit,\n    annualCosts,\n    // Indicadores de rentabilidade\n    monthlyRentability,\n    annualRentability,\n    roi,\n    // Tempo de retorno\n    paybackMonths,\n    paybackYears,\n    // Análises adicionais\n    profitMargin: netMonthlyProfit / monthlyRent * 100,\n    grossYield: monthlyRent * 12 / propertyValue * 100,\n    netYield: netMonthlyProfit * 12 / propertyValue * 100,\n    // Métricas de avaliação\n    isGoodInvestment: monthlyRentability >= 0.5 && paybackYears <= 15,\n    riskLevel: getRiskLevel(monthlyRentability, paybackYears),\n    recommendation: getRecommendation(monthlyRentability, paybackYears, roi)\n  };\n};\n\n/**\n * Determina o nível de risco do investimento\n */\nconst getRiskLevel = (monthlyRent, payback) => {\n  if (monthlyRent >= 0.8 && payback <= 10) return 'low';\n  if (monthlyRent >= 0.5 && payback <= 15) return 'medium';\n  return 'high';\n};\n\n/**\n * Gera recomendação baseada nos indicadores\n */\nconst getRecommendation = (monthlyRent, payback, roi) => {\n  if (monthlyRent >= 0.8 && payback <= 12 && roi >= 8) {\n    return 'Excelente investimento! Rentabilidade alta com retorno rápido.';\n  }\n  if (monthlyRent >= 0.5 && payback <= 15 && roi >= 6) {\n    return 'Bom investimento. Considere também a valorização do imóvel.';\n  }\n  if (monthlyRent >= 0.3 && payback <= 20) {\n    return 'Investimento moderado. Analise outros fatores como localização.';\n  }\n  return 'Rentabilidade baixa. Considere renegociar valores ou buscar outras opções.';\n};\n\n/**\n * Calcula projeção de lucros futuros\n */\nexport const calculateProjection = (results, years = 5) => {\n  const projection = [];\n  for (let year = 1; year <= years; year++) {\n    const cumulativeProfit = results.annualNetProfit * year;\n    const roi = cumulativeProfit / results.downPayment * 100;\n    projection.push({\n      year,\n      cumulativeProfit,\n      roi,\n      breakEven: year >= results.paybackYears\n    });\n  }\n  return projection;\n};\n\n/**\n * Compara diferentes cenários de investimento\n */\nexport const compareScenarios = scenarios => {\n  return scenarios.map(scenario => ({\n    ...scenario,\n    score: calculateInvestmentScore(scenario)\n  })).sort((a, b) => b.score - a.score);\n};\n\n/**\n * Calcula score do investimento (0-100)\n */\nconst calculateInvestmentScore = results => {\n  let score = 0;\n\n  // Rentabilidade mensal (40% do score)\n  if (results.monthlyRentability >= 1.0) score += 40;else if (results.monthlyRentability >= 0.7) score += 30;else if (results.monthlyRentability >= 0.5) score += 20;else if (results.monthlyRentability >= 0.3) score += 10;\n\n  // Payback (30% do score)\n  if (results.paybackYears <= 8) score += 30;else if (results.paybackYears <= 12) score += 22;else if (results.paybackYears <= 15) score += 15;else if (results.paybackYears <= 20) score += 8;\n\n  // ROI (30% do score)\n  if (results.roi >= 12) score += 30;else if (results.roi >= 8) score += 22;else if (results.roi >= 6) score += 15;else if (results.roi >= 4) score += 8;\n  return Math.min(score, 100);\n};","map":{"version":3,"names":["parseMoneyValue","value","cleanValue","replace","parseFloat","calculateRentability","formData","propertyValue","monthlyRent","monthlyCosts","downPayment","Error","netMonthlyProfit","monthlyRentability","annualRentability","investmentBase","roi","paybackMonths","paybackYears","annualNetProfit","annualGrossProfit","annualCosts","profitMargin","grossYield","netYield","isGoodInvestment","riskLevel","getRiskLevel","recommendation","getRecommendation","payback","calculateProjection","results","years","projection","year","cumulativeProfit","push","breakEven","compareScenarios","scenarios","map","scenario","score","calculateInvestmentScore","sort","a","b","Math","min"],"sources":["/workspaces/rental-calculator/src/utils/calculations.js"],"sourcesContent":["// src/utils/calculations.js\n\n/**\n * Remove formatação de moeda e converte para número\n */\nconst parseMoneyValue = (value) => {\n  if (!value) return 0;\n  \n  // Remove R$, pontos e vírgulas, depois converte para número\n  const cleanValue = value\n    .replace(/R\\$\\s?/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  return parseFloat(cleanValue) || 0;\n};\n\n/**\n * Calcula todos os indicadores de rentabilidade\n */\nexport const calculateRentability = (formData) => {\n  const propertyValue = parseMoneyValue(formData.propertyValue);\n  const monthlyRent = parseMoneyValue(formData.monthlyRent);\n  const monthlyCosts = parseMoneyValue(formData.monthlyCosts);\n  const downPayment = parseMoneyValue(formData.downPayment);\n\n  // Validação básica\n  if (propertyValue <= 0 || monthlyRent <= 0) {\n    throw new Error('Valores inválidos para cálculo');\n  }\n\n  // Lucro líquido mensal\n  const netMonthlyProfit = monthlyRent - monthlyCosts;\n\n  // Rentabilidade mensal sobre o valor do imóvel\n  const monthlyRentability = (netMonthlyProfit / propertyValue) * 100;\n\n  // Rentabilidade anual\n  const annualRentability = monthlyRentability * 12;\n\n  // ROI (Return on Investment) - considerando o valor de entrada se informado\n  const investmentBase = downPayment > 0 ? downPayment : propertyValue;\n  const roi = ((netMonthlyProfit * 12) / investmentBase) * 100;\n\n  // Payback - tempo para recuperar o investimento\n  const paybackMonths = investmentBase / netMonthlyProfit;\n  const paybackYears = paybackMonths / 12;\n\n  // Projeções anuais\n  const annualNetProfit = netMonthlyProfit * 12;\n  const annualGrossProfit = monthlyRent * 12;\n  const annualCosts = monthlyCosts * 12;\n\n  return {\n    // Valores principais\n    propertyValue,\n    monthlyRent,\n    monthlyCosts,\n    downPayment: downPayment || propertyValue,\n    \n    // Lucros\n    netMonthlyProfit,\n    annualNetProfit,\n    annualGrossProfit,\n    annualCosts,\n    \n    // Indicadores de rentabilidade\n    monthlyRentability,\n    annualRentability,\n    roi,\n    \n    // Tempo de retorno\n    paybackMonths,\n    paybackYears,\n    \n    // Análises adicionais\n    profitMargin: (netMonthlyProfit / monthlyRent) * 100,\n    grossYield: (monthlyRent * 12 / propertyValue) * 100,\n    netYield: (netMonthlyProfit * 12 / propertyValue) * 100,\n    \n    // Métricas de avaliação\n    isGoodInvestment: monthlyRentability >= 0.5 && paybackYears <= 15,\n    riskLevel: getRiskLevel(monthlyRentability, paybackYears),\n    recommendation: getRecommendation(monthlyRentability, paybackYears, roi)\n  };\n};\n\n/**\n * Determina o nível de risco do investimento\n */\nconst getRiskLevel = (monthlyRent, payback) => {\n  if (monthlyRent >= 0.8 && payback <= 10) return 'low';\n  if (monthlyRent >= 0.5 && payback <= 15) return 'medium';\n  return 'high';\n};\n\n/**\n * Gera recomendação baseada nos indicadores\n */\nconst getRecommendation = (monthlyRent, payback, roi) => {\n  if (monthlyRent >= 0.8 && payback <= 12 && roi >= 8) {\n    return 'Excelente investimento! Rentabilidade alta com retorno rápido.';\n  }\n  \n  if (monthlyRent >= 0.5 && payback <= 15 && roi >= 6) {\n    return 'Bom investimento. Considere também a valorização do imóvel.';\n  }\n  \n  if (monthlyRent >= 0.3 && payback <= 20) {\n    return 'Investimento moderado. Analise outros fatores como localização.';\n  }\n  \n  return 'Rentabilidade baixa. Considere renegociar valores ou buscar outras opções.';\n};\n\n/**\n * Calcula projeção de lucros futuros\n */\nexport const calculateProjection = (results, years = 5) => {\n  const projection = [];\n  \n  for (let year = 1; year <= years; year++) {\n    const cumulativeProfit = results.annualNetProfit * year;\n    const roi = (cumulativeProfit / results.downPayment) * 100;\n    \n    projection.push({\n      year,\n      cumulativeProfit,\n      roi,\n      breakEven: year >= results.paybackYears\n    });\n  }\n  \n  return projection;\n};\n\n/**\n * Compara diferentes cenários de investimento\n */\nexport const compareScenarios = (scenarios) => {\n  return scenarios.map(scenario => ({\n    ...scenario,\n    score: calculateInvestmentScore(scenario)\n  })).sort((a, b) => b.score - a.score);\n};\n\n/**\n * Calcula score do investimento (0-100)\n */\nconst calculateInvestmentScore = (results) => {\n  let score = 0;\n  \n  // Rentabilidade mensal (40% do score)\n  if (results.monthlyRentability >= 1.0) score += 40;\n  else if (results.monthlyRentability >= 0.7) score += 30;\n  else if (results.monthlyRentability >= 0.5) score += 20;\n  else if (results.monthlyRentability >= 0.3) score += 10;\n  \n  // Payback (30% do score)\n  if (results.paybackYears <= 8) score += 30;\n  else if (results.paybackYears <= 12) score += 22;\n  else if (results.paybackYears <= 15) score += 15;\n  else if (results.paybackYears <= 20) score += 8;\n  \n  // ROI (30% do score)\n  if (results.roi >= 12) score += 30;\n  else if (results.roi >= 8) score += 22;\n  else if (results.roi >= 6) score += 15;\n  else if (results.roi >= 4) score += 8;\n  \n  return Math.min(score, 100);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}